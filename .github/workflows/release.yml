name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      tag: ${{ steps.semantic.outputs.tag }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Sync dependencies
        run: uv sync

      - name: Configure git
        run: |
          git config user.name "semantic-release[bot]"
          git config user.email "semantic-release[bot]@users.noreply.github.com"

      - name: Run semantic release
        id: semantic
        run: |
          # Run semantic-release (handles version bump, changelog, commit, tag, release)
          uv run semantic-release publish 2>&1 || true

          # Extract version and tag from git
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            TAG=$(git describe --tags --exact-match HEAD)
            VERSION=$(echo "$TAG" | sed 's/^v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "✅ Release created: $TAG (v$VERSION)"
          else
            echo "version=" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
            echo "ℹ️  No release needed - no version changes detected"
          fi
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  build-windows:
    needs: release
    if: needs.release.outputs.tag != ''
    runs-on: windows-latest
    name: Build Windows Executable

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Sync dependencies
        run: uv sync

      - name: Build executable
        run: |
          uv run pyinstaller --onefile --console `
            --name auto-accept `
            --hidden-import=selenium `
            --hidden-import=rich `
            --hidden-import=src `
            --hidden-import=src.core `
            --hidden-import=src.core.browser `
            --hidden-import=src.core.gmail `
            --hidden-import=src.core.scanner `
            --hidden-import=src.config `
            --hidden-import=src.config.constants `
            --hidden-import=src.utils `
            --hidden-import=src.utils.config_init `
            --hidden-import=src.utils.tracker `
            --hidden-import=src.utils.ui `
            main.py

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: auto-accept-windows
          path: dist/auto-accept.exe

  build-macos:
    needs: release
    if: needs.release.outputs.tag != ''
    runs-on: macos-latest
    name: Build macOS Executable

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Sync dependencies
        run: uv sync

      - name: Build executable
        run: |
          uv run pyinstaller --onefile --console \
            --name auto-accept \
            --hidden-import=selenium \
            --hidden-import=rich \
            --hidden-import=src \
            --hidden-import=src.core \
            --hidden-import=src.core.browser \
            --hidden-import=src.core.gmail \
            --hidden-import=src.core.scanner \
            --hidden-import=src.config \
            --hidden-import=src.config.constants \
            --hidden-import=src.utils \
            --hidden-import=src.utils.config_init \
            --hidden-import=src.utils.tracker \
            --hidden-import=src.utils.ui \
            main.py

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: auto-accept-macos
          path: dist/auto-accept

  upload-artifacts:
    needs: [release, build-windows, build-macos]
    if: needs.release.outputs.tag != ''
    runs-on: ubuntu-latest
    name: Upload Artifacts to Release

    steps:
      - uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: auto-accept-windows
          path: artifacts-windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: auto-accept-macos
          path: artifacts-macos

      - name: Create checksums
        run: |
          mkdir -p checksums
          sha256sum artifacts-windows/auto-accept.exe > checksums/auto-accept-windows.exe.sha256
          sha256sum artifacts-macos/auto-accept > checksums/auto-accept-macos.sha256
          cat checksums/*

      - name: Upload artifacts to release
        run: |
          gh release upload ${{ needs.release.outputs.tag }} \
            artifacts-windows/auto-accept.exe \
            checksums/auto-accept-windows.exe.sha256 \
            artifacts-macos/auto-accept \
            checksums/auto-accept-macos.sha256 \
            --clobber
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
